{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","error","console","log","Input","props","text","newSomething","handleNewSomething","react_default","a","createElement","value","onChange","ReadPerson","addPerson","newName","handleNewName","newNumber","handleNewNumber","onSubmit","App_Input","type","Listing","persons","newSearch","deletePerson","filter","person","name","toLocaleLowerCase","includes","map","key","number","onClick","Notification","_ref","message","style","className","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","hook","personService","returnedPerson","useEffect","length","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewSearch","_useState9","_useState10","errorMessage","setErrorMessage","_useState11","_useState12","errorStyle","setErrorStyle","renderErrorMessage","setTimeout","App_Notification","event","preventDefault","target","App_ReadPerson","window","confirm","uusiPerson","vanhaPerson","find","catch","App_Listing","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3338341.chunk.js","sourcesContent":["import axios from 'axios'\n// import { request } from 'https';\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePersonById = id => {\n  try {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  } catch(error) {\n    console.log('Tää on persons.js:ssä errorina: ', error)\n  }\n\n  }\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  deletePersonById: deletePersonById\n}\n","import React, {\n  useState,\n  useEffect\n} from \"react\"\n\nimport personService from \"./services/persons\"\n\nconst Input = props => {\n  const {\n    text,\n    newSomething,\n    handleNewSomething\n  } = props\n  return (\n    <div>\n      {text}{\" \"}\n      <input\n        value={newSomething}\n        onChange={handleNewSomething}\n      />\n    </div>\n  )\n}\n\nconst ReadPerson = props => {\n  console.log(\n    \"props readpersonissa on \",\n    props\n  )\n  const {\n    addPerson,\n    newName,\n    handleNewName,\n    newNumber,\n    handleNewNumber\n  } = props\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        <Input\n          text={\"Nimi: \"}\n          newSomething={newName}\n          handleNewSomething={\n            handleNewName\n          }\n        />\n        <Input\n          text={\"Numero: \"}\n          newSomething={newNumber}\n          handleNewSomething={\n            handleNewNumber\n          }\n        />\n        <button type=\"submit\">\n          Lisää\n        </button>\n      </div>\n    </form>\n  )\n}\n\nconst Listing = props => {\n  const {\n    persons,\n    newSearch,\n    deletePerson\n  } = props\n\n  return persons\n    .filter(person =>\n      person.name\n        .toLocaleLowerCase()\n        .includes(\n          newSearch.toLocaleLowerCase()\n        )\n    )\n    .map(person => {\n      return (\n        <div key={person.id}>\n          {person.name} {person.number}\n          <button\n            value={person.id}\n            onClick={deletePerson}\n          >\n            Poista\n          </button>\n        </div>\n      )\n    })\n}\n\nconst Notification = ({\n  message,\n  style\n}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={style}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [\n    persons,\n    setPersons\n  ] = useState([])\n\n  const hook = () => {\n    console.log(\"effect\")\n    personService\n      .getAll()\n      .then(returnedPerson => {\n        console.log(\"promise fulfilled\")\n        setPersons(returnedPerson)\n      })\n  }\n  useEffect(hook, [])\n  console.log(\n    \"render\",\n    persons.length,\n    \"persons\"\n  )\n\n  const [\n    newName,\n    setNewName\n  ] = useState(\"\")\n  const [\n    newNumber,\n    setNewNumber\n  ] = useState(\"\")\n  const [\n    newSearch,\n    setNewSearch\n  ] = useState(\"\")\n\n  const [\n    errorMessage,\n    setErrorMessage\n  ] = useState(\"\")\n\n  const [\n    errorStyle,\n    setErrorStyle\n  ] = useState(\"normal\")\n\n  const renderErrorMessage = props => {\n    console.log(props)\n\n    setErrorMessage(props)\n    setTimeout(() => {\n      setErrorMessage(null)\n      setErrorStyle(\"normal\")\n    }, 3000)\n  }\n\n  const handleNewName = event => {\n    event.preventDefault()\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = event => {\n    event.preventDefault()\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewSearch = event => {\n    event.preventDefault()\n    console.log(\n      \"event.target.value: \",\n      event.target.value\n    )\n    console.log(\n      \"newSearch: \",\n      newSearch\n    )\n    setNewSearch(event.target.value)\n    console.log(\n      \"newSearch: \",\n      newSearch\n    )\n  }\n\n  const deletePerson = event => {\n    event.preventDefault()\n    const id = \"\" + event.target.value\n    const person = persons.find(\n      person => {\n        return \"\" + person.id === id\n      }\n    )\n\n    const saaPoistaa = window.confirm(\n      `Saako henkilön ${\n        person.name\n      } poistaa?`\n    )\n    if (saaPoistaa) {\n      personService\n        .deletePersonById(id)\n        .then(() => {\n          setErrorStyle(\"success\")\n          renderErrorMessage(\n            \"Henkilön poisto onnistui!\"\n          )\n          return hook()\n        })\n        .catch(() => {\n          setErrorStyle(\"error\")\n          renderErrorMessage(\n            \"Henkilö oli jo poistettu!\"\n          )\n          return hook()\n        })\n    }\n  }\n\n  const addPerson = event => {\n    event.preventDefault()\n    if (newName === \"\") {\n      setErrorStyle(\"error\")\n      renderErrorMessage(\n        \"Et ole vielä syöttänyt nimeä.\"\n      )\n    } else {\n      if (\n        !persons\n          .map(person => person.name)\n          .includes(newName)\n      ) {\n        const person = {\n          name: newName,\n          number: newNumber\n        }\n        personService\n          .create(person)\n          .then(returnedPerson => {\n            setPersons(\n              persons.concat(\n                returnedPerson\n              )\n            )\n            setErrorStyle(\"success\")\n            renderErrorMessage(\n              \"Lisääminen onnistui!\"\n            )\n\n            setNewName(\"\")\n            setNewNumber(\"\")\n            setNewSearch(\"\")\n          })\n      } else {\n        const korvataanNumero = window.confirm(\n          `${newName} on jo luettelossa. Korvataanko vanha numero uudella?`\n        )\n        if (korvataanNumero) {\n          const uusiPerson = {\n            name: newName,\n            number: newNumber\n          }\n          const vanhaPerson = persons.find(\n            person =>\n              person.name === newName\n          )\n          personService\n            .update(\n              vanhaPerson.id,\n              uusiPerson\n            )\n            .then(() => {\n              setErrorStyle(\"success\")\n              renderErrorMessage(\n                `Päivittäminen onnistui!`\n              )\n              return hook()\n            })\n            .catch(() => {\n              setErrorStyle(\"error\")\n              renderErrorMessage(\n                \"Henkilö oli jo poistettu, ei voi päivittää!\"\n              )\n              return hook()\n            })\n        }\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n\n      <Notification\n        message={errorMessage}\n        style={errorStyle}\n      />\n\n      <Input\n        text={\"Hae: \"}\n        newSomething={newSearch}\n        handleNewSomething={\n          handleNewSearch\n        }\n      />\n      <ReadPerson\n        addPerson={addPerson}\n        newName={newName}\n        handleNewName={handleNewName}\n        newNumber={newNumber}\n        handleNewNumber={\n          handleNewNumber\n        }\n      />\n\n      <h2>Puhelinnumerot</h2>\n\n      <Listing\n        persons={persons}\n        newSearch={newSearch}\n        deletePerson={deletePerson}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import axios from 'axios'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}